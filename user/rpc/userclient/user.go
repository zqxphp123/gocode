// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.1
// Source: user.proto

package userclient

import (
	"context"

	"user/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateRep    = user.CreateRep
	CreateResp   = user.CreateResp
	Pong         = user.Pong
	UserRequest  = user.UserRequest
	UserResponse = user.UserResponse

	User interface {
		GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
		Ping(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Pong, error)
		Create(ctx context.Context, in *CreateRep, opts ...grpc.CallOption) (*CreateResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUser) Ping(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Pong, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultUser) Create(ctx context.Context, in *CreateRep, opts ...grpc.CallOption) (*CreateResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Create(ctx, in, opts...)
}
